---
# Source: lecture-bot-app/templates/prometheus-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: team-lecture-bot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 16Gi 

---
# Source: lecture-bot-app/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "lecture-bot-ingress"
  namespace: "team-lecture-bot"
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
    - hosts:
        - "team-lecture-bot.student.k8s.aet.cit.tum.de"
      secretName: "lecture-bot-devops25-tls"
  rules:
    - host: "team-lecture-bot.student.k8s.aet.cit.tum.de"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: client-service
                port:
                  number: 3000
          - path: /api/v1
            pathType: Prefix
            backend:
              service:
                name: api-gateway-service
                port:
                  number: 8080

---
# Source: lecture-bot-app/templates/discovery-service-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: discovery-service
  namespace: "team-lecture-bot"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: discovery-service
  template:
    metadata:
      labels:
        app: discovery-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8761"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/instance: "discovery-service"
    spec:
      containers:
        - name: discovery-service
          image: "ghcr.io/aet-devops25/team-lecture-bot/discovery-service:task-monitoring-and-observability"
          imagePullPolicy: Always
          ports:
            - containerPort: 8761
          env:
            - name: app.jwtSecret
              value: "c29tZXRoaW5nLXNlY3JldC1mb3ItbGVjdHVyZS1ib3QtYXBwbGljYXRpb24tMjAyNC1kZXZvcHM="
            - name: app.jwtExpirationInMs
              value: "86400000"
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8761
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8761
            initialDelaySeconds: 60
            periodSeconds: 10
 

---
# Source: lecture-bot-app/templates/db-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lecturebot-db
  namespace: "team-lecture-bot"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lecturebot-db
  template:
    metadata:
      labels:
        app: lecturebot-db
    spec:
      containers:
        - name: postgres
          image: postgres:16
          ports:
            - containerPort: 5432
          resources:
            requests:
              cpu: "200m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - lecturebot_user
                - -d
                - lecturebot_db
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - lecturebot_user
                - -d
                - lecturebot_db
            initialDelaySeconds: 5
            periodSeconds: 10
          env:
            - name: POSTGRES_DB
              value: "lecturebot_db"
            - name: POSTGRES_USER
              value: "lecturebot_user"
            - name: POSTGRES_PASSWORD
              value: "mysecretpassword"
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          volumeMounts:
            - name: db-data
              mountPath: /var/lib/postgresql/data
            - name: db-init
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: db-data
          persistentVolumeClaim:
            claimName: lecturebot-db-pvc
        - name: db-init
          configMap:
            name: db-init-scripts


---
# Source: lecture-bot-app/templates/api-gateway-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  namespace: "team-lecture-bot"
spec:
  selector:
    app: api-gateway
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  type: ClusterIP

---
# Source: lecture-bot-app/templates/weaviate-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: weaviate
  namespace: "team-lecture-bot"
spec:
  selector:
    app: weaviate
  ports:
    - name: http
      port: 8080
      targetPort: 8080
    - name: grpc
      port: 50051
      targetPort: 50051
  type: ClusterIP

---
# Source: lecture-bot-app/templates/prometheus-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: team-lecture-bot
data:
  prometheus.yaml: |

    global:
      scrape_interval: 15s
    
    rule_files:
      - 'alert.rules.yaml'
    
    alerting:
      alertmanagers:
        - static_configs:
          - targets:
            - 'alertmanager:9093'
    
    scrape_configs:
      - job_name: 'user-course-microservice'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['user-course-microservice:8081']
            labels:
              application: 'user-course-microservice'
    
      - job_name: 'genai-backend-microservice'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['genai-backend-microservice:8082']
            labels:
              application: 'genai-backend-microservice'
    
      - job_name: 'api-gateway'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['api-gateway:8080']
            labels:
              application: 'api-gateway'
    
      - job_name: 'discovery-service'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['discovery-service:8761']
            labels:
              application: 'discovery-service'
        basic_auth:
          username: 'eureka-user'
          password: 'eureka-password'
    
      - job_name: 'genai-service'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['genai-service:8011']
            labels:
              application: 'genai-service'
    
    
      # Kubernetes Pod Monitoring - https://john-tucker.medium.com/prometheus-scraping-configurations-by-example-cc2ffea2cef6
      #- job_name: 'kubernetes-pods'
      #  kubernetes_sd_configs:
      #    - role: pod
      #      namespaces:
      #        names:
      #          - "team-lecture-bot"
      #  relabel_configs:
      #    - source_labels: [__meta_kubernetes_namespace]
      #      action: keep
      #      regex: team-lecture-bot
      #    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
      #      action: keep
      #      regex: true
      #    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
      #      action: replace
      #      target_label: __metrics_path__
      #      regex: (.+)
      #    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
      #      action: replace
      #      regex: (\d+);((([0-9]+?)(\.|$)){4})
      #      replacement: $2:$1
      #      target_label: __address__
      #    - action: labelmap
      #      regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
      #      replacement: __param_$1
      #    - source_labels: [__meta_kubernetes_namespace]
      #      action: replace
      #      target_label: namespace
      #    - source_labels: [__meta_kubernetes_pod_name]
      #      action: replace
      #      target_label: pod
      #    - source_labels: [__meta_kubernetes_pod_phase]
      #      regex: Pending|Succeeded|Failed|Completed
      #      action: drop
      #    - source_labels: [__meta_kubernetes_pod_node_name]
      #      action: replace
      #      target_label: node
    
  alertmanager.yaml: |

    groups:
      - name: lecturebot-rules
        rules:
          - alert: ServiceDown
            expr: up == 0
            for: 1m
            labels:
              severity: 'critical'
            annotations:
              summary: 'Service {{ $labels.job }} is down.'
              description: 'The service {{ $labels.job }} has been down for more than 1 minute.'
    
          - alert: HighErrorRate
            # This calculates the percentage of 5xx server errors over the last 5 minutes.
            # It alerts if the error rate is greater than 5%.
            expr: >
              (
                sum(rate(http_server_requests_seconds_count{status=~"5.*"}[5m])) by (job)
                /
                sum(rate(http_server_requests_seconds_count[5m])) by (job)
              ) * 100 > 5
            for: 2m
            labels:
              severity: 'warning'
            annotations:
              summary: 'High error rate detected in {{ $labels.job }}.'
              description: 'The service {{ $labels.job }} has an error rate of {{ $value | printf "%.2f" }}% over the last 5 minutes.'
    
          # Slow Response Time
          - alert: SlowResponseTime
            # This expression finds the 95th percentile response time over the last 10 minutes.
            # It alerts if the p95 response time is greater than 1 second.
            expr: histogram_quantile(0.95, sum(rate(http_server_requests_seconds_bucket[10m])) by (le, job)) > 1
            for: 5m
            labels:
              severity: 'warning'
            annotations:
              summary: 'Slow response time detected in {{ $labels.job }}.'
              description: 'The 95th percentile response time for {{ $labels.job }} is over 1s.'
              
          # NEW RULE: Service Flapping (Alternative to Pod Restarts)
          - alert: ServiceFlapping
            # This rule alerts if a service has been down and then back up more than 3 times in the last 15 minutes.
            expr: changes(up[15m]) > 3
            for: 5m
            labels:
              severity: 'warning'
            annotations:
              summary: 'Service {{ $labels.job }} is flapping.'
              description: 'The service {{ $labels.job }} has changed its up/down status more than 3 times in the last 15 minutes, indicating instability.'
    
    

---
# Source: lecture-bot-app/templates/genai-service-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: genai-service
  namespace: "team-lecture-bot"
spec:
  selector:
    app: genai-service
  ports:
    - port: 8011
      targetPort: 8011
      protocol: TCP
  type: ClusterIP

---
# Source: lecture-bot-app/templates/db-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: lecturebot-db
  namespace: "team-lecture-bot"
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: lecturebot-db


---
# Source: lecture-bot-app/templates/alertmanager-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: "team-lecture-bot"
spec:
  selector:
    app: alertmanager
  ports:
    - port: 9093
      targetPort: 9093
  type: ClusterIP

---
# Source: lecture-bot-app/templates/prometheus-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: "team-lecture-bot"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      securityContext:
        fsGroup: 65534
        runAsUser: 65534
        runAsNonRoot: true
      containers:
        - name: prometheus
          image: "prom/prometheus:latest"
          ports:
            - containerPort: 9090
          args:
            - '--config.file=/etc/prometheus/prometheus.yaml'
            - '--storage.tsdb.path=/prometheus'
          volumeMounts:
            - name: config-volume
              mountPath: /etc/prometheus
            - name: storage-volume
              mountPath: /prometheus
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-config
        - name: storage-volume
          persistentVolumeClaim:
            claimName: prometheus-pvc

---
# Source: lecture-bot-app/templates/app-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: "team-lecture-bot"
data:
  PUBLIC_API_URL: https://team-lecture-bot.student.k8s.aet.cit.tum.de/api/v1

---
# Source: lecture-bot-app/templates/alertmanager-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: "team-lecture-bot"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
    spec:
      containers:
        - name: alertmanager
          image: "prom/alertmanager:latest"
          ports:
            - containerPort: 9093
          args:
            - '--config.file=/config/config.yml'
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: alertmanager-config

---
# Source: lecture-bot-app/templates/grafana-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: "team-lecture-bot"
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
  type: ClusterIP

---
# Source: lecture-bot-app/templates/grafana-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: team-lecture-bot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi 

---
# Source: lecture-bot-app/templates/grafana-configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: team-lecture-bot
data:
  prometheus-datasource.yml: |
        apiVersion: 1
    
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        uid: prometheus-lecturebot
    
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: team-lecture-bot
data:
  dashboards.yml: |

    apiVersion: 1
    
    providers:
      # A provider definition
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /etc/grafana/provisioning/dashboards 
    
  service-health-dashboard.json: |

    {
      "__inputs": [
        {
          "name": "DS_PROMETHEUS",
          "label": "Prometheus",
          "description": "",
          "type": "datasource",
          "pluginId": "prometheus",
          "pluginName": "Prometheus"
        }
      ],
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "10.2.0"
        },
        {
          "type": "datasource",
          "id": "prometheus",
          "name": "Prometheus",
          "version": "1.0.0"
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": {
              "type": "grafana",
              "uid": "-- Grafana --"
            },
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "fiscalYearStartMonth": 0,
      "graphTooltip": 0,
      "id": 2,
      "panels": [
        {
          "id": 1,
          "gridPos": { "h": 8, "w": 24, "x": 0, "y": 0 },
          "type": "stat",
          "title": "Service Availability",
          "datasource": "prometheus-lecturebot",
          "pluginVersion": "10.2.0",
          "fieldConfig": {
            "defaults": {
              "mappings": [
                {
                  "type": "value",
                  "options": { "1": { "text": "Up", "color": "green" }, "0": { "text": "Down", "color": "red" } }
                }
              ],
              "thresholds": { "mode": "absolute", "steps": [{ "color": "red", "value": 0 }, { "color": "green", "value": 1 }] }
            }
          },
          "options": { "reduceOptions": { "values": false, "calcs": ["last"], "fields": "" }, "orientation": "auto", "textMode": "auto" },
          "targets": [{ "refId": "A", "datasource": "prometheus-lecturebot", "expr": "up" }]
        },
        {
          "id": 2,
          "gridPos": { "h": 8, "w": 12, "x": 0, "y": 8 },
          "type": "timeseries",
          "title": "HTTP Request Rate per Service",
          "datasource": "prometheus-lecturebot",
          "targets": [
            {
              "expr": "sum(rate(http_server_requests_seconds_count[1m]) or rate(http_requests_total[1m])) by (job)",
              "legendFormat": "{{job}}",
              "refId": "A"
            }
          ]
        },
        {
          "id": 3,
          "gridPos": { "h": 8, "w": 12, "x": 12, "y": 8 },
          "type": "timeseries",
          "title": "5xx Error Rate per Service",
          "datasource": "prometheus-lecturebot",
          "fieldConfig": { "defaults": { "unit": "percent" } },
          "targets": [
            {
              "expr": "(sum(rate(http_server_requests_seconds_count{status=~\"5.*\"}[1m]) or rate(http_requests_total{status=~\"5xx\"}[1m])) by (job) / sum(rate(http_server_requests_seconds_count[1m]) or rate(http_requests_total[1m])) by (job)) * 100",
              "legendFormat": "{{job}}",
              "refId": "A"
            }
          ]
        },
        {
          "id": 4,
          "gridPos": { "h": 8, "w": 12, "x": 0, "y": 16 },
          "type": "timeseries",
          "title": "95th Percentile Response Time",
          "datasource": "prometheus-lecturebot",
          "fieldConfig": { "defaults": { "unit": "s" } },
          "targets": [
            {
              "expr": "histogram_quantile(0.95, sum(rate(http_server_requests_seconds_bucket[2m]) or rate(http_request_duration_seconds_bucket[2m])) by (le, job))",
              "legendFormat": "{{job}}",
              "refId": "A"
            }
          ]
        },
        {
          "id": 5,
          "gridPos": { "h": 8, "w": 12, "x": 12, "y": 16 },
          "type": "timeseries",
          "title": "JVM Heap Memory Usage",
          "datasource": "prometheus-lecturebot",
          "fieldConfig": { "defaults": { "unit": "bytes" } },
          "targets": [
            {
              "expr": "sum(jvm_memory_used_bytes{area=\"heap\"}) by (job)",
              "legendFormat": "{{job}}",
              "refId": "A"
            }
          ]
        },
        {
          "id": 6,
          "gridPos": { "h": 8, "w": 12, "x": 0, "y": 24 },
          "type": "timeseries",
          "title": "Python Process Memory Usage",
          "datasource": "prometheus-lecturebot",
          "fieldConfig": { "defaults": { "unit": "bytes" } },
          "targets": [
            {
              "expr": "sum(process_resident_memory_bytes) by (job)",
              "legendFormat": "{{job}}",
              "refId": "A"
            }
          ]
        }
      ],
      "schemaVersion": 38,
      "style": "dark",
      "tags": [],
      "time": {
        "from": "now-5m",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": ["5s", "10s", "30s", "1m", "5m"]
      },
      "timezone": "browser",
      "title": "Service Health Detail",
      "uid": "service-health-dashboard",
      "version": 1
    }
    
  lecturebot-dashboard.json: |

    {
      "__inputs": [{"name": "DS_PROMETHEUS", "label": "Prometheus", "description": "", "type": "datasource", "pluginId": "prometheus", "pluginName": "Prometheus"}],
      "__requires": [{"type": "grafana", "id": "grafana", "name": "Grafana", "version": "10.2.0"}, {"type": "datasource", "id": "prometheus", "name": "Prometheus", "version": "1.0.0"}],
      "annotations": {"list": [{"builtIn": 1, "datasource": {"type": "grafana", "uid": "-- Grafana --"}, "enable": true, "hide": true, "iconColor": "rgba(0, 211, 255, 1)", "name": "Annotations & Alerts", "type": "dashboard"}]},
      "editable": true,
      "fiscalYearStartMonth": 0,
      "graphTooltip": 0,
      "id": 1,
      "panels": [
        {
          "datasource": {"type": "prometheus", "uid": "prometheus-lecturebot"},
          "fieldConfig": {"defaults": {"color": {"mode": "palette-classic"}, "custom": {"axisPlacement": "auto", "barAlignment": 0, "drawStyle": "line", "fillOpacity": 10, "gradientMode": "opacity", "lineInterpolation": "smooth", "lineWidth": 1, "pointSize": 5, "showPoints": "auto", "spanNulls": false}, "mappings": [], "thresholds": {"mode": "absolute", "steps": [{"color": "green", "value": null}, {"color": "red", "value": 80}]}}, "overrides": []},
          "gridPos": {"h": 9, "w": 24, "x": 0, "y": 0},
          "id": 2,
          "options": {"legend": {"calcs": [], "displayMode": "list", "placement": "bottom"}, "tooltip": {"mode": "single", "sort": "none"}},
          "targets": [
            {
              "datasource": {"type": "prometheus", "uid": "prometheus-lecturebot"},
              "editorMode": "builder",
              "expr": "sum by (application) (rate(http_server_requests_seconds_count{job!=\"prometheus\"}[5m]) or rate(http_requests_total{job!=\"prometheus\"}[5m]))",
              "legendFormat": "{{application}}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "HTTP Request Rate",
          "type": "timeseries"
        }
      ],
      "schemaVersion": 38,
      "style": "dark",
      "tags": [],
      "time": {"from": "now-1h", "to": "now"},
      "timepicker": {},
      "timezone": "browser",
      "title": "LectureBot System Dashboard",
      "uid": "lecturebot-system-dashboard"
    }
    

---
# Source: lecture-bot-app/templates/client-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lecture-bot-client
  namespace: team-lecture-bot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lecture-bot-client-selector
  template:
    metadata:
      labels:
        app: lecture-bot-client-selector
    spec:
      containers:
        - name: lecture-bot-client
          image: "ghcr.io/aet-devops25/team-lecture-bot/client:task-monitoring-and-observability"
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
          resources:
            requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "300m"
            memory: "256Mi"
          volumeMounts:
            - name: config-volume
              mountPath: /usr/share/nginx/html/config.json
              subPath: config.json
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: client-config

---
# Source: lecture-bot-app/templates/genai-backend-microservice-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: genai-backend-microservice
  namespace: "team-lecture-bot"
spec:
  selector:
    app: genai-backend-microservice
  ports:
    - port: 8082
      targetPort: 8082
      protocol: TCP
  type: ClusterIP

---
# Source: lecture-bot-app/templates/genai-backend-microservice-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: genai-backend-microservice
  namespace: "team-lecture-bot"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: genai-backend-microservice
  template:
    metadata:
      labels:
        app: genai-backend-microservice
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/instance: "genai-backend-microservice"
    spec:
      containers:
        - name: genai-backend-microservice
          image: "ghcr.io/aet-devops25/team-lecture-bot/genai-backend-microservice:task-monitoring-and-observability"
          imagePullPolicy: Always
          ports:
            - containerPort: 8082
          env:
            - name: EUREKA_INSTANCE_HOSTNAME
              value: "genai-backend-microservice"
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: "update"
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://genai-backend-db:5432/genai_db"
            - name: SPRING_DATASOURCE_USERNAME
              value: "genai_user"
            - name: SPRING_DATASOURCE_PASSWORD
              value: "mysecretpassword"
            - name: GENAI_SERVICE_BASE_URL
              value: "http://genai-service:8011"
            - name: app.jwtSecret
              value: "c29tZXRoaW5nLXNlY3JldC1mb3ItbGVjdHVyZS1ib3QtYXBwbGljYXRpb24tMjAyNC1kZXZvcHM="
            - name: app.jwtExpirationInMs
              value: "86400000"
            - name: EUREKA_URI
              value: "http://discovery-service:8761/eureka/"
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8082
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8082
            initialDelaySeconds: 60
            periodSeconds: 10


---
# Source: lecture-bot-app/templates/client-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: client-config
  namespace: team-lecture-bot
data:
  config.json: |-
    {
      "PUBLIC_API_URL": "https://team-lecture-bot.student.k8s.aet.cit.tum.de/api/v1"
    }


---
# Source: lecture-bot-app/templates/alertmanager-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: team-lecture-bot
data:
  config.yml: |

    global:
      resolve_timeout: 5m
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_from: 'lecturebot.tum.devopsss25@gmail.com'
      smtp_auth_username: 'lecturebot.tum.devopsss25@gmail.com'
      smtp_auth_password: 'tjix oqmr komx yjcc'
      smtp_require_tls: true
    route:
      receiver: 'email-notifications'
      group_by: ['alertname', 'job']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
    receivers:
      - name: 'email-notifications'
        email_configs:
          - to: 'evtim.kostadinov@tum.de'
            send_resolved: true
    

---
# Source: lecture-bot-app/templates/db-init-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: db-init-scripts
  namespace: team-lecture-bot
data:

  init-users.sql: |
    -- Insert 5 sample users
    -- IMPORTANT: Passwords are in plain text for this initial setup.

    CREATE TABLE IF NOT EXISTS app_user (
        id SERIAL PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        name VARCHAR(255) NOT NULL
    );

    INSERT INTO app_user (email, password_hash, name) VALUES
    ('evtim@example.com', 'evtimpass', 'Evtim Kostadinov'),
    ('laura@example.com', 'laurapass', 'Laura Leschke'),
    ('carlos@example.com', 'carlospass', 'Carlos Mejia'),
    ('max@example.com', 'maxpass', 'Max Mustermann'),
    ('erika@example.com', 'erikapass', 'Erika Mustermann')
    ON CONFLICT (email) DO NOTHING; -- Optional: Prevents error if an email already exists, useful if script runs multiple times against a non-empty DB somehow, though initdb.d scripts usually don't.

    SELECT 'Finished initializing users from init-users.sql' AS status;

---
# Source: lecture-bot-app/templates/user-course-microservice-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-course-microservice
  namespace: "team-lecture-bot"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-course-microservice
  template:
    metadata:
      labels:
        app: user-course-microservice
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/instance: "user-course-microservice"
    spec:
      initContainers:
        - name: wait-for-db
          image: busybox:1.28
          command: ['sh', '-c', 'until nslookup lecturebot-db; do echo waiting for db; sleep 2; done;']
      containers:
        - name: user-course-microservice
          image: "ghcr.io/aet-devops25/team-lecture-bot/user-course-microservice:task-monitoring-and-observability"
          imagePullPolicy: Always
          ports:
            - containerPort: 8081
          env:
            - name: EUREKA_INSTANCE_HOSTNAME
              value: "user-course-microservice"
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://lecturebot-db:5432/lecturebot_db"
            - name: SPRING_DATASOURCE_USERNAME
              value: "lecturebot_user"
            - name: SPRING_DATASOURCE_PASSWORD
              value: "mysecretpassword"
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: "update"
            - name: GENAI_SERVICE_BASE_URL
              value: "http://genai-service:8011"
            - name: LECTUREBOT_CLIENT_ORIGIN
              value: "https://{{ .Values.namespacename }}.student.k8s.aet.cit.tum.de"
            - name: app.jwtSecret
              value: "c29tZXRoaW5nLXNlY3JldC1mb3ItbGVjdHVyZS1ib3QtYXBwbGljYXRpb24tMjAyNC1kZXZvcHM="
            - name: app.jwtExpirationInMs
              value: "86400000"
            - name: EUREKA_URI
              value: "http://discovery-service:8761/eureka/"
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8081
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet: 
              path: /actuator/health
              port: 8081
            initialDelaySeconds: 60
            periodSeconds: 10

---
# Source: lecture-bot-app/templates/grafana-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: "team-lecture-bot"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  rules:
  - host: "grafana.team-lecture-bot.student.k8s.aet.cit.tum.de"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana
            port:
              number: 3000
  tls:
  - hosts:
    - "grafana.team-lecture-bot.student.k8s.aet.cit.tum.de"
    secretName: grafana-tls

---
# Source: lecture-bot-app/templates/genai-service-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: genai-service
  namespace: "team-lecture-bot"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: genai-service
  template:
    metadata:
      labels:
        app: genai-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8011"
        prometheus.io/path: "/metrics"
        prometheus.io/instance: "genai-service"
    spec:
      containers:
        - name: genai-service
          image: "ghcr.io/aet-devops25/team-lecture-bot/genai:task-monitoring-and-observability"
          imagePullPolicy: Always
          ports:
            - containerPort: 8011
          env:
            - name: LLM_PROVIDER
              value: "tum_aet"
            - name: OLLAMA_MODEL_NAME
              value: "llama3:8b-instruct-q4_K_M"
            - name: OLLAMA_BASE_URL
              value: "http://host.docker.internal:11434"
            - name: OPENAI_API_KEY
              value: "your_openai_key_if_using_openai"
            - name: OPENAI_MODEL_NAME
              value: "gpt-4o-mini"
            - name: TUM_AET_LLM_API_BASE
              value: "https://gpu.aet.cit.tum.de/api"
            - name: TUM_AET_LLM_API_KEY
              value: "sk-d56891f96ed94add810873324af99ef0"
            - name: TUM_AET_LLM_MODEL_NAME
              value: "llama3.3:latest"
            - name: WEAVIATE_URL
              value: "http://weaviate:8080"
            - name: TOKENIZERS_PARALLELISM
              value: "false"
          livenessProbe:
            httpGet:
              path: /health
              port: 8011
            initialDelaySeconds: 90
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8011
            initialDelaySeconds: 90
            periodSeconds: 10
 

---
# Source: lecture-bot-app/templates/client-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: client-service
  namespace: "team-lecture-bot"
spec:
  selector:
    app: lecture-bot-client-selector
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
  type: ClusterIP

---
# Source: lecture-bot-app/templates/api-gateway-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: "team-lecture-bot"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/instance: "api-gateway"
    spec:
      containers:
        - name: api-gateway
          image: "ghcr.io/aet-devops25/team-lecture-bot/api-gateway:task-monitoring-and-observability"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: EUREKA_INSTANCE_HOSTNAME
              value: "api-gateway"
            - name: SERVER_PORT
              value: "8080"
            - name: EUREKA_URI
              value: "http://discovery-service:8761/eureka/"
            - name: LECTUREBOT_CLIENT_ORIGIN
              value: "https://{{ .Values.namespacename }}.student.k8s.aet.cit.tum.de"
            - name: app.jwtSecret
              value: "c29tZXRoaW5nLXNlY3JldC1mb3ItbGVjdHVyZS1ib3QtYXBwbGljYXRpb24tMjAyNC1kZXZvcHM="
            - name: app.jwtExpirationInMs
              value: "86400000"
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10

---
# Source: lecture-bot-app/templates/weaviate-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: weaviate-pvc
  namespace: "team-lecture-bot"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---
# Source: lecture-bot-app/templates/pvc.yaml

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: lecturebot-db-pvc
  namespace: "team-lecture-bot"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# Source: lecture-bot-app/templates/prometheus-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: "team-lecture-bot"
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
  type: ClusterIP

---
# Source: lecture-bot-app/templates/grafana-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: "team-lecture-bot"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        runAsUser: 472
      containers:
        - name: grafana
          image: "grafana/grafana:latest"
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: "admin"
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "grafana"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards

---
# Source: lecture-bot-app/templates/genai-backend-db-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: genai-backend-db
  namespace: "team-lecture-bot"
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: genai-backend-db

---
# Source: lecture-bot-app/templates/genai-backend-db-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: genai-backend-db-pvc
  namespace: "team-lecture-bot"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi

---
# Source: lecture-bot-app/templates/genai-backend-db-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: genai-backend-db
  namespace: "team-lecture-bot"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: genai-backend-db
  template:
    metadata:
      labels:
        app: genai-backend-db
    spec:
      containers:
        - name: postgres
          image: "postgres:16"
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: "genai_db"
            - name: POSTGRES_USER
              value: "genai_user"
            - name: POSTGRES_PASSWORD
              value: "mysecretpassword"
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          volumeMounts:
            - name: genai-db-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: genai-db-data
          persistentVolumeClaim:
            claimName: genai-backend-db-pvc

---
# Source: lecture-bot-app/templates/discovery-service-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: discovery-service
  namespace: "team-lecture-bot"
spec:
  selector:
    app: discovery-service
  ports:
    - port: 8761
      targetPort: 8761
      protocol: TCP
  type: ClusterIP

---
# Source: lecture-bot-app/templates/weaviate-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weaviate
  namespace: "team-lecture-bot"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: weaviate
  template:
    metadata:
      labels:
        app: weaviate
    spec:
      containers:
        - name: weaviate
          image: "semitechnologies/weaviate:latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED
              value: "true"
            - name: PERSISTENCE_DATA_PATH
              value: "/var/lib/weaviate"
            - name: DEFAULT_VECTORIZER_MODULE
              value: "none"
            - name: ENABLE_MODULES
              value: ""
            - name: CLUSTER_HOSTNAME
              value: "node1"
          volumeMounts:
            - name: weaviate-data
              mountPath: /var/lib/weaviate
      volumes:
        - name: weaviate-data
          persistentVolumeClaim:
            claimName: weaviate-pvc

---
# Source: lecture-bot-app/templates/user-course-microservice-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: user-course-microservice
  namespace: "team-lecture-bot"
spec:
  selector:
    app: user-course-microservice
  ports:
    - port: 8081
      targetPort: 8081
      protocol: TCP
  type: ClusterIP
