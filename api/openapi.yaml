openapi: 3.0.3
info:
  title: LECture-bot API
  description: The official API for the LECture-bot application.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
security:
  - bearerAuth: [] # Applies JWT Bearer authentication globally to all endpoints except those with an empty security array

tags:
  - name: CourseSpaces
paths:
  /health:
    get:
      summary: Health Check
      description: Checks if the server is running.
      operationId: healthCheck
      tags:
        - Health
      security: [] # This endpoint does not require authentication
      responses:
        '200':
          description: Server is up and running.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account.
      operationId: registerUser
      tags:
        - Authentication
      security: [] # This endpoint does not require authentication
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Registration successful.
          content:
            text/plain:
              schema:
                type: string
                example: Registration successful for user@example.com
        '400':
          description: Bad Request - Invalid input or email already exists.
          content:
            text/plain:
              schema:
                type: string
                example: Email already exists
  /auth/login:
    post:
      summary: Log in a user
      description: Authenticates a user and returns a JWT.
      operationId: loginUser
      tags:
        - Authentication
      security: [] # This endpoint does not require authentication
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized - Bad credentials.

  /genai/index:
    post:
      summary: Index a document
      description: Sends a document's content to the GenAI service for indexing.
      operationId: indexDocument
      tags:
        - GenAI
      requestBody:
        description: Document indexing request details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexRequest'
      responses:
        '200':
          description: Document indexed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexResponse'
        '500':
          description: Internal Server Error - Failed to index document.
          content:
            text/plain:
              schema:
                type: string
                example: Failed to index document via GenAI service

  /genai/query:
    post:
      summary: Submit a query
      description: Sends a natural language query to the GenAI service for RAG.
      operationId: submitQuery
      tags:
        - GenAI
      requestBody:
        description: Query request details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      responses:
        '200':
          description: Query processed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        '500':
          description: Internal Server Error - Failed to get query response.
          content:
            text/plain:
              schema:
                type: string
                example: Faioled to get query response from GenAI service
  /genai/generate-flashcards:
    post:
      summary: Generate flashcards
      description: Generates flashcards from a specific document or from all documents in a course space.
      operationId: generateFlashcards
      tags:
        - GenAI
      requestBody:
        description: Flashcard generation request details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlashcardRequest'
      responses:
        '200':
          description: Flashcards generated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlashcardResponse'
        '500':
          description: Internal Server Error - Failed to generate flashcards.
          content:
            text/plain:
              schema:
                type: string
                example: Failed to generate flashcards via GenAI service
  /profile:
    get:
      summary: Get current user's profile
      description: Retrieves the profile information for the currently authenticated user.
      operationId: getUserProfile
      tags:
        - Profile
      responses:
        '200':
          description: User profile data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized - No or invalid token provided.
    put:
      summary: Update current user's profile
      description: Updates the name and/or email for the currently authenticated user.
      operationId: updateUserProfile
      tags:
        - Profile
      requestBody:
        description: The new profile information.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: Profile updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserProfileResponse'
        '400':
          description: Bad Request (e.g., validation error, email already in use).
        '401':
          description: Unauthorized.

  /profile/password:
    patch:
      summary: Change current user's password
      description: Allows the authenticated user to change their password.
      operationId: changePassword
      tags:
        - Profile
      requestBody:
        description: The old and new password.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully.
        '400':
          description: Bad Request (e.g., old password incorrect).
        '401':
          description: Unauthorized.

  /coursespaces:
    get:
      summary: Get all course spaces for the current user
      description: Retrieves a list of all course spaces associated with the authenticated user.
      operationId: getCourseSpaces
      tags:
        - CourseSpaces
      responses:
        '200':
          description: A list of the user's course spaces.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseSpaceDto'
        '401':
          description: Unauthorized.
    post:
      summary: Create a new course space
      description: Creates a new course space for the authenticated user.
      operationId: createCourseSpace
      tags:
        - CourseSpaces
      requestBody:
        description: The details of the course space to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseSpaceRequest'
      responses:
        '201':
          description: Course space created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseSpaceDto'
        '400':
          description: Bad Request (e.g., validation error).
        '401':
          description: Unauthorized.
  /coursespaces/{courseSpaceId}:
    get:
      summary: Get a specific CourseSpace 
      description: Gets the information for a chose CourseSpace
      operationId: getCourseSpace
      tags:
        - CourseSpaces
      parameters:
        - name: courseSpaceId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the course space to get
      responses:
          '200':
            description: Course Space fetched successfully.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/CourseSpaceDto'
          '400':
            description: Bad Request (e.g., invalid ID).
          '401':
            description: Unauthorized.
          '404':
            description: Course space not found.
    delete:
      summary: Delete a course space
      description: Permanently deletes a course space by its ID.
      operationId: deleteCourseSpace
      tags:
        - CourseSpaces
      parameters:
        - name: courseSpaceId 
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the course space to delete.
      responses:
        '204':
          description: Course space deleted successfully.
        '400':
          description: Bad Request (e.g., invalid ID).
        '401':
          description: Unauthorized.
        '404':
          description: Course space not found.



components:
  schemas:
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          example: UP
        message:
          type: string
          example: LECture-bot server is running!
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: Ada Lovelace
        email:
          type: string
          format: email
          example: ada.lovelace@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: Password123!
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: ada.lovelace@example.com
        password:
          type: string
          format: password
          example: Password123!
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZGEubG92ZWxhY2VAZXhhbXBsZS5jb20iLCJpYXQiOjE2MTYyMzkwMjIsImV4cCI6MTYxNjMyNTQyMn0.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    IndexRequest:
      type: object
      required:
        - document_id
        - course_space_id
        - text_content
      properties:
        document_id:
          type: string
          example: doc-123
        course_space_id:
          type: string
          example: cs-456
        text_content:
          type: string
          example: This is the content of the document.
    IndexResponse:
      type: object
      properties:
        message:
          type: string
          example: Document indexed successfully
        document_id:
          type: string
          example: doc-123
        status:
          type: string
          example: completed
          description: Status of the indexing operation.
        chunks_processed:
          type: integer
          example: 5
          description: Number of text chunks processed.
        chunks_stored_in_weaviate:
          type: integer
          example: 5
          description: Number of chunks successfully stored in Weaviate.
    QueryRequest:
      type: object
      required:
        - query_text
        - course_space_id
      properties:
        query_text:
          type: string
          example: What is this document about?
        course_space_id:
          type: string
          example: cs-456
    QueryResponse:
      type: object
      properties:
        answer:
          type: string
          example: This document is about...
        citations:
          type: array
          items:
            $ref: '#/components/schemas/Citation'
            type: string
          example: ["doc-123", "doc-456"]
          description: A list of citations for the generated answer.
    FlashcardRequest:
      type: object
      required:
        - course_space_id
      properties:
        course_space_id:
          type: string
          example: cs-456
        document_id:
          type: string
          nullable: true
          example: "doc-123"
    Flashcard:
      type: object
      properties:
        question:
          type: string
          example: What is the capital of France?
        answer:
          type: string
          example: Paris
    FlashcardsForDocument:
      type: object
      properties:
        document_id:
          type: string
        flashcards:
          type: array
          items:
            $ref: '#/components/schemas/Flashcard'
    FlashcardResponse:
      type: object
      properties:
        course_space_id:
          type: string
        flashcards:
          type: array
          items:
            $ref: '#/components/schemas/FlashcardsForDocument'
    Citation:
      type: object
      required:
        - document_id
        - chunk_id
        - retrieved_text_preview
      properties:
        document_id:
          type: string
          description: The ID of the document from which the citation was retrieved.
          example: doc-123
        chunk_id:
          type: string
          description: A unique identifier for the specific chunk within the document (e.g., chunk index, page number).
          example: "0"
        document_name:
          type: string
          description: The name or title of the source document.
          example: "Lecture Slides Week 5"
          nullable: true
        retrieved_text_preview:
          type: string
          description: A short snippet of the text that was retrieved and used as context.
          example: "LangChain is a framework for developing applications powered by language models."
    CourseSpaceDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        name:
          type: string
          example: "Introduction to AI"
        created_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        owner:
          $ref: '#/components/schemas/UserProfile'
    CreateCourseSpaceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the course space to create.
          example: "Introduction to AI"

    UserProfile:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
          example: Ada Lovelace
        email:
          type: string
          format: email
          example: ada.lovelace@example.com
    UpdateUserProfileRequest:
      type: object
      properties:
        name:
          type: string
          example: Ada L.
        email:
          type: string
          format: email
          example: ada.lovelace.new@example.com
    ChangePasswordRequest:
      type: object
      properties:
        old_password:
          type: string
        new_password:
          type: string
          minLength: 8
    UpdateUserProfileResponse:
      type: object
      properties:
        userProfile:
          $ref: '#/components/schemas/UserProfile'
        require_reauth:
          type: boolean
          example: false
        message:
          type: string
          example: Profile updated successfully.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
