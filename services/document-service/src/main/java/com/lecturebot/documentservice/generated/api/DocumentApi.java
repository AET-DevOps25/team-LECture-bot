/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.lecturebot.documentservice.generated.api;

import com.lecturebot.documentservice.generated.model.Document;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-03T14:21:23.039489100+02:00[Europe/Berlin]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "Document", description = "the Document API")
public interface DocumentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/coursespaces/{courseSpaceId}/documents : Upload PDF(s) to Course Space
     *
     * @param courseSpaceId  (required)
     * @param files  (optional)
     * @return Upload result to course space (status code 200)
     */
    @Operation(
        operationId = "apiCoursespacesCourseSpaceIdDocumentsPost",
        summary = "Upload PDF(s) to Course Space",
        tags = { "Document" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Upload result to course space", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Document.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/coursespaces/{courseSpaceId}/documents",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<List<Document>> apiCoursespacesCourseSpaceIdDocumentsPost(
        @Parameter(name = "courseSpaceId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("courseSpaceId") String courseSpaceId,
        @Parameter(name = "files", description = "") @RequestPart(value = "files", required = false) List<MultipartFile> files
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"processingStatus\" : \"PENDING\", \"filename\" : \"filename\", \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"extractedText\" : \"extractedText\", \"id\" : \"id\", \"courseId\" : \"courseId\", \"userId\" : \"userId\", \"fileType\" : \"PDF\" }, { \"processingStatus\" : \"PENDING\", \"filename\" : \"filename\", \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"extractedText\" : \"extractedText\", \"id\" : \"id\", \"courseId\" : \"courseId\", \"userId\" : \"userId\", \"fileType\" : \"PDF\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /documents/{id} : Get document metadata
     *
     * @param id  (required)
     * @return Document metadata (status code 200)
     */
    @Operation(
        operationId = "documentsIdGet",
        summary = "Get document metadata",
        tags = { "Document" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Document metadata", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/documents/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Document> documentsIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"processingStatus\" : \"PENDING\", \"filename\" : \"filename\", \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"extractedText\" : \"extractedText\", \"id\" : \"id\", \"courseId\" : \"courseId\", \"userId\" : \"userId\", \"fileType\" : \"PDF\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /documents : Upload PDF(s)
     *
     * @param files  (optional)
     * @return Upload result (status code 200)
     */
    @Operation(
        operationId = "documentsPost",
        summary = "Upload PDF(s)",
        tags = { "Document" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Upload result", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Document.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/documents",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<List<Document>> documentsPost(
        @Parameter(name = "files", description = "") @RequestPart(value = "files", required = false) List<MultipartFile> files
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"processingStatus\" : \"PENDING\", \"filename\" : \"filename\", \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"extractedText\" : \"extractedText\", \"id\" : \"id\", \"courseId\" : \"courseId\", \"userId\" : \"userId\", \"fileType\" : \"PDF\" }, { \"processingStatus\" : \"PENDING\", \"filename\" : \"filename\", \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"extractedText\" : \"extractedText\", \"id\" : \"id\", \"courseId\" : \"courseId\", \"userId\" : \"userId\", \"fileType\" : \"PDF\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
