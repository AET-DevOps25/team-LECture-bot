/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.lecturebot.generated.api;

import com.lecturebot.generated.model.FlashcardRequest;
import com.lecturebot.generated.model.FlashcardResponse;
import com.lecturebot.generated.model.IndexRequest;
import com.lecturebot.generated.model.IndexResponse;
import com.lecturebot.generated.model.QueryRequest;
import com.lecturebot.generated.model.QueryResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-09T13:53:25.595271+03:00[Europe/Sofia]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "GenAI", description = "the GenAI API")
public interface GenAiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /genai/generate-flashcards : Generate flashcards
     * Generates flashcards from a specific document or from all documents in a course space.
     *
     * @param flashcardRequest Flashcard generation request details (required)
     * @return Flashcards generated successfully. (status code 200)
     *         or No flashcards generated - No documents found in the course space. (status code 204)
     *         or Internal Server Error - Failed to generate flashcards. (status code 500)
     */
    @Operation(
        operationId = "generateFlashcards",
        summary = "Generate flashcards",
        description = "Generates flashcards from a specific document or from all documents in a course space.",
        tags = { "GenAI" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Flashcards generated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FlashcardResponse.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = FlashcardResponse.class))
            }),
            @ApiResponse(responseCode = "204", description = "No flashcards generated - No documents found in the course space.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error - Failed to generate flashcards.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/genai/generate-flashcards",
        produces = { "application/json", "text/plain" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FlashcardResponse> generateFlashcards(
        @Parameter(name = "FlashcardRequest", description = "Flashcard generation request details", required = true) @Valid @RequestBody FlashcardRequest flashcardRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"flashcards\" : [ { \"flashcards\" : [ { \"question\" : \"What is the capital of France?\", \"answer\" : \"Paris\" }, { \"question\" : \"What is the capital of France?\", \"answer\" : \"Paris\" } ], \"document_id\" : \"document_id\" }, { \"flashcards\" : [ { \"question\" : \"What is the capital of France?\", \"answer\" : \"Paris\" }, { \"question\" : \"What is the capital of France?\", \"answer\" : \"Paris\" } ], \"document_id\" : \"document_id\" } ], \"error\" : \"Failed to retrieve documents from the vector store.\", \"course_space_id\" : \"course_space_id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /genai/index : Index a document
     * Sends a document&#39;s content to the GenAI service for indexing.
     *
     * @param indexRequest Document indexing request details (required)
     * @return Document indexed successfully. (status code 200)
     *         or Internal Server Error - Failed to index document. (status code 500)
     */
    @Operation(
        operationId = "indexDocument",
        summary = "Index a document",
        description = "Sends a document's content to the GenAI service for indexing.",
        tags = { "GenAI" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Document indexed successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IndexResponse.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = IndexResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error - Failed to index document.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/genai/index",
        produces = { "application/json", "text/plain" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<IndexResponse> indexDocument(
        @Parameter(name = "IndexRequest", description = "Document indexing request details", required = true) @Valid @RequestBody IndexRequest indexRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"chunks_stored_in_weaviate\" : 5, \"chunks_processed\" : 5, \"message\" : \"Document indexed successfully\", \"document_id\" : \"doc-123\", \"status\" : \"completed\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /genai/query : Submit a query
     * Sends a natural language query to the GenAI service for RAG.
     *
     * @param queryRequest Query request details (required)
     * @return Query processed successfully. (status code 200)
     *         or Internal Server Error - Failed to get query response. (status code 500)
     */
    @Operation(
        operationId = "submitQuery",
        summary = "Submit a query",
        description = "Sends a natural language query to the GenAI service for RAG.",
        tags = { "GenAI" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Query processed successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = QueryResponse.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = QueryResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error - Failed to get query response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/plain", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/genai/query",
        produces = { "application/json", "text/plain" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<QueryResponse> submitQuery(
        @Parameter(name = "QueryRequest", description = "Query request details", required = true) @Valid @RequestBody QueryRequest queryRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"citations\" : [ { \"document_name\" : \"Lecture Slides Week 5\", \"retrieved_text_preview\" : \"LangChain is a framework for developing applications powered by language models.\", \"document_id\" : \"doc-123\", \"chunk_id\" : \"0\" }, { \"document_name\" : \"Lecture Slides Week 5\", \"retrieved_text_preview\" : \"LangChain is a framework for developing applications powered by language models.\", \"document_id\" : \"doc-123\", \"chunk_id\" : \"0\" } ], \"answer\" : \"This document is about...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
