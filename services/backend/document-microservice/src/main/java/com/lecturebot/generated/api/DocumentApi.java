/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.lecturebot.generated.api;

import com.lecturebot.generated.model.Document;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-19T11:17:28.002982+03:00[Europe/Sofia]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "Document", description = "the Document API")
public interface DocumentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /documents/{courseSpaceId}/{id} : Delete a document by ID for a Course Space
     *
     * @param courseSpaceId  (required)
     * @param id  (required)
     * @return Document deleted successfully (status code 204)
     *         or Unauthorized (status code 401)
     *         or Document not found (status code 404)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "deleteDocumentById",
        summary = "Delete a document by ID for a Course Space",
        tags = { "Document" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Document deleted successfully"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "404", description = "Document not found"),
            @ApiResponse(responseCode = "500", description = "Server error")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/documents/{courseSpaceId}/{id}"
    )
    
    default ResponseEntity<Void> deleteDocumentById(
        @Parameter(name = "courseSpaceId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("courseSpaceId") String courseSpaceId,
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /documents/{courseSpaceId} : List all documents for a Course Space
     *
     * @param courseSpaceId  (required)
     * @return List of documents (status code 200)
     *         or Something went wrong with the request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "listDocuments",
        summary = "List all documents for a Course Space",
        tags = { "Document" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of documents", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Document.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Something went wrong with the request"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "500", description = "Server error")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/documents/{courseSpaceId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Document>> listDocuments(
        @Parameter(name = "courseSpaceId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("courseSpaceId") String courseSpaceId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"processingStatus\" : \"PENDING\", \"filename\" : \"filename\", \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"courseId\" : \"courseId\", \"fileType\" : \"PDF\" }, { \"processingStatus\" : \"PENDING\", \"filename\" : \"filename\", \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"courseId\" : \"courseId\", \"fileType\" : \"PDF\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /documents/{courseSpaceId} : Upload PDF(s) to a Course Space
     *
     * @param courseSpaceId  (required)
     * @param files Array of PDF files to upload (required)
     * @return Upload result (status code 200)
     *         or Invalid input (status code 400)
     *         or Unauthorized (status code 401)
     *         or Conflict - Duplicate document (status code 409)
     *         or Unprocessable Entity - Document processing failed (status code 422)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "uploadDocuments",
        summary = "Upload PDF(s) to a Course Space",
        tags = { "Document" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Upload result", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Document.class)), examples = {
                    @ExampleObject(
                        name = "",
                        value = "[{\"id\":\"abc123\",\"filename\":\"file1.pdf\",\"fileType\":\"PDF\",\"uploadDate\":\"2025-07-14T12:00:00Z\",\"courseId\":\"course1\",\"processingStatus\":\"COMPLETED\"}]"
                    )
                })

            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "409", description = "Conflict - Duplicate document"),
            @ApiResponse(responseCode = "422", description = "Unprocessable Entity - Document processing failed"),
            @ApiResponse(responseCode = "500", description = "Server error")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/documents/{courseSpaceId}",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    default ResponseEntity<List<Document>> uploadDocuments(
        @Parameter(name = "courseSpaceId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("courseSpaceId") String courseSpaceId,
        @Parameter(name = "files", description = "Array of PDF files to upload", required = true) @RequestPart(value = "files", required = true) List<MultipartFile> files
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"processingStatus\" : \"PENDING\", \"filename\" : \"filename\", \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"courseId\" : \"courseId\", \"fileType\" : \"PDF\" }, { \"processingStatus\" : \"PENDING\", \"filename\" : \"filename\", \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : \"id\", \"courseId\" : \"courseId\", \"fileType\" : \"PDF\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
