/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.lecturebot.generated.api;

import com.lecturebot.generated.model.ChangePasswordRequest;
import com.lecturebot.generated.model.UpdateUserProfileRequest;
import com.lecturebot.generated.model.UpdateUserProfileResponse;
import com.lecturebot.generated.model.UserProfile;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-30T18:33:02.482669+02:00[Europe/Berlin]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "Profile", description = "the Profile API")
public interface ProfileApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PATCH /profile/password : Change current user&#39;s password
     * Allows the authenticated user to change their password.
     *
     * @param changePasswordRequest The old and new password. (required)
     * @return Password changed successfully. (status code 200)
     *         or Bad Request (e.g., old password incorrect). (status code 400)
     *         or Unauthorized. (status code 401)
     */
    @Operation(
        operationId = "changePassword",
        summary = "Change current user's password",
        description = "Allows the authenticated user to change their password.",
        tags = { "Profile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Password changed successfully."),
            @ApiResponse(responseCode = "400", description = "Bad Request (e.g., old password incorrect)."),
            @ApiResponse(responseCode = "401", description = "Unauthorized.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/profile/password",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> changePassword(
        @Parameter(name = "ChangePasswordRequest", description = "The old and new password.", required = true) @Valid @RequestBody ChangePasswordRequest changePasswordRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /profile : Get current user&#39;s profile
     * Retrieves the profile information for the currently authenticated user.
     *
     * @return User profile data. (status code 200)
     *         or Unauthorized - No or invalid token provided. (status code 401)
     */
    @Operation(
        operationId = "getUserProfile",
        summary = "Get current user's profile",
        description = "Retrieves the profile information for the currently authenticated user.",
        tags = { "Profile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User profile data.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserProfile.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized - No or invalid token provided.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/profile",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserProfile> getUserProfile(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"Ada Lovelace\", \"id\" : 0, \"email\" : \"ada.lovelace@example.com\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /profile : Update current user&#39;s profile
     * Updates the name and/or email for the currently authenticated user.
     *
     * @param updateUserProfileRequest The new profile information. (required)
     * @return Profile updated successfully. (status code 200)
     *         or Bad Request (e.g., validation error, email already in use). (status code 400)
     *         or Unauthorized. (status code 401)
     */
    @Operation(
        operationId = "updateUserProfile",
        summary = "Update current user's profile",
        description = "Updates the name and/or email for the currently authenticated user.",
        tags = { "Profile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Profile updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UpdateUserProfileResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request (e.g., validation error, email already in use)."),
            @ApiResponse(responseCode = "401", description = "Unauthorized.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/profile",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UpdateUserProfileResponse> updateUserProfile(
        @Parameter(name = "UpdateUserProfileRequest", description = "The new profile information.", required = true) @Valid @RequestBody UpdateUserProfileRequest updateUserProfileRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"Profile updated successfully.\", \"userProfile\" : { \"name\" : \"Ada Lovelace\", \"id\" : 0, \"email\" : \"ada.lovelace@example.com\" }, \"require_reauth\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
