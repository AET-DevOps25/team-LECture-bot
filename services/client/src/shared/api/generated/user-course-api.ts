/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Checks if the server is running.
         */
        get: operations["healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Creates a new user account.
         */
        post: operations["registerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log in a user
         * @description Authenticates a user and returns a JWT.
         */
        post: operations["loginUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user's profile
         * @description Retrieves the profile information for the currently authenticated user.
         */
        get: operations["getUserProfile"];
        /**
         * Update current user's profile
         * @description Updates the name and/or email for the currently authenticated user.
         */
        put: operations["updateUserProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Change current user's password
         * @description Allows the authenticated user to change their password.
         */
        patch: operations["changePassword"];
        trace?: never;
    };
    "/coursespaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all course spaces for the current user
         * @description Retrieves a list of all course spaces associated with the authenticated user.
         */
        get: operations["getCourseSpaces"];
        put?: never;
        /**
         * Create a new course space
         * @description Creates a new course space for the authenticated user.
         */
        post: operations["createCourseSpace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/coursespaces/{courseSpaceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific CourseSpace
         * @description Gets the information for a chose CourseSpace
         */
        get: operations["getCourseSpace"];
        put?: never;
        post?: never;
        /**
         * Delete a course space
         * @description Permanently deletes a course space by its ID.
         */
        delete: operations["deleteCourseSpace"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HealthStatus: {
            /** @example UP */
            status?: string;
            /** @example LECture-bot server is running! */
            message?: string;
        };
        RegisterRequest: {
            /** @example Ada Lovelace */
            name: string;
            /**
             * Format: email
             * @example ada.lovelace@example.com
             */
            email: string;
            /**
             * Format: password
             * @example Password123!
             */
            password: string;
        };
        LoginRequest: {
            /**
             * Format: email
             * @example ada.lovelace@example.com
             */
            email: string;
            /**
             * Format: password
             * @example Password123!
             */
            password: string;
        };
        LoginResponse: {
            /** @example eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZGEubG92ZWxhY2VAZXhhbXBsZS5jb20iLCJpYXQiOjE2MTYyMzkwMjIsImV4cCI6MTYxNjMyNTQyMn0.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c */
            token?: string;
        };
        UserProfile: {
            /** Format: int64 */
            readonly id?: number;
            /** @example Ada Lovelace */
            name?: string;
            /**
             * Format: email
             * @example ada.lovelace@example.com
             */
            email?: string;
        };
        UpdateUserProfileRequest: {
            /** @example Ada L. */
            name?: string;
            /**
             * Format: email
             * @example ada.lovelace.new@example.com
             */
            email?: string;
        };
        ChangePasswordRequest: {
            old_password?: string;
            new_password?: string;
        };
        UpdateUserProfileResponse: {
            userProfile?: components["schemas"]["UserProfile"];
            /** @example false */
            require_reauth?: boolean;
            /** @example Profile updated successfully. */
            message?: string;
        };
        CourseSpaceDto: {
            /**
             * Format: uuid
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id?: string;
            /** @example Introduction to AI */
            name?: string;
            /**
             * Format: date-time
             * @example 2023-10-01T12:00:00Z
             */
            created_at?: string;
            /**
             * Format: date-time
             * @example 2023-10-01T12:00:00Z
             */
            updated_at?: string;
            owner?: components["schemas"]["UserProfile"];
        };
        CreateCourseSpaceRequest: {
            /**
             * @description The name of the course space to create.
             * @example Introduction to AI
             */
            name: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Server is up and running. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthStatus"];
                };
            };
        };
    };
    registerUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User registration details */
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description Registration successful. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Bad Request - Invalid input or email already exists. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    loginUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User login credentials */
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Login successful. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Unauthorized - Bad credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfile"];
                };
            };
            /** @description Unauthorized - No or invalid token provided. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The new profile information. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserProfileRequest"];
            };
        };
        responses: {
            /** @description Profile updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateUserProfileResponse"];
                };
            };
            /** @description Bad Request (e.g., validation error, email already in use). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The old and new password. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePasswordRequest"];
            };
        };
        responses: {
            /** @description Password changed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request (e.g., old password incorrect). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCourseSpaces: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of the user's course spaces. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseSpaceDto"][];
                };
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createCourseSpace: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The details of the course space to create. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCourseSpaceRequest"];
            };
        };
        responses: {
            /** @description Course space created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseSpaceDto"];
                };
            };
            /** @description Bad Request (e.g., validation error). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCourseSpace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the course space to get */
                courseSpaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course Space fetched successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CourseSpaceDto"];
                };
            };
            /** @description Bad Request (e.g., invalid ID). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Course space not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteCourseSpace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the course space to delete. */
                courseSpaceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Course space deleted successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request (e.g., invalid ID). */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Course space not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
