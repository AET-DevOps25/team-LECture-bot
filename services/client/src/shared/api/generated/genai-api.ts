/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/genai/index": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Index a document
         * @description Sends a document's content to the GenAI service for indexing.
         */
        post: operations["indexDocument"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/genai/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit a query
         * @description Sends a natural language query to the GenAI service for RAG.
         */
        post: operations["submitQuery"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/genai/generate-flashcards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate flashcards
         * @description Generates flashcards from a specific document or from all documents in a course space.
         */
        post: operations["generateFlashcards"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        IndexRequest: {
            /** @example doc-123 */
            document_id: string;
            /** @example cs-456 */
            course_space_id: string;
            /** @example This is the content of the document. */
            text_content: string;
        };
        IndexResponse: {
            /** @example Document indexed successfully */
            message?: string;
            /** @example doc-123 */
            document_id?: string;
            /**
             * @description Status of the indexing operation.
             * @example completed
             */
            status?: string;
            /**
             * @description Number of text chunks processed.
             * @example 5
             */
            chunks_processed?: number;
            /**
             * @description Number of chunks successfully stored in Weaviate.
             * @example 5
             */
            chunks_stored_in_weaviate?: number;
        };
        QueryRequest: {
            /** @example What is this document about? */
            query_text: string;
            /** @example cs-456 */
            course_space_id: string;
        };
        QueryResponse: {
            /** @example This document is about... */
            answer?: string;
            citations?: components["schemas"]["Citation"][];
        };
        FlashcardRequest: {
            /** @example cs-456 */
            course_space_id: string;
            /** @example doc-123 */
            document_id?: string | null;
        };
        Flashcard: {
            /** @example What is the capital of France? */
            question?: string;
            /** @example Paris */
            answer?: string;
        };
        FlashcardsForDocument: {
            document_id?: string;
            flashcards?: components["schemas"]["Flashcard"][];
        };
        FlashcardResponse: {
            course_space_id?: string;
            flashcards?: components["schemas"]["FlashcardsForDocument"][];
        };
        Citation: {
            /**
             * @description The ID of the document from which the citation was retrieved.
             * @example doc-123
             */
            document_id: string;
            /**
             * @description A unique identifier for the specific chunk within the document (e.g., chunk index, page number).
             * @example 0
             */
            chunk_id: string;
            /**
             * @description The name or title of the source document.
             * @example Lecture Slides Week 5
             */
            document_name?: string | null;
            /**
             * @description A short snippet of the text that was retrieved and used as context.
             * @example LangChain is a framework for developing applications powered by language models.
             */
            retrieved_text_preview: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    indexDocument: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Document indexing request details */
        requestBody: {
            content: {
                "application/json": components["schemas"]["IndexRequest"];
            };
        };
        responses: {
            /** @description Document indexed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IndexResponse"];
                };
            };
            /** @description Internal Server Error - Failed to index document. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    submitQuery: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Query request details */
        requestBody: {
            content: {
                "application/json": components["schemas"]["QueryRequest"];
            };
        };
        responses: {
            /** @description Query processed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryResponse"];
                };
            };
            /** @description Internal Server Error - Failed to get query response. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    generateFlashcards: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Flashcard generation request details */
        requestBody: {
            content: {
                "application/json": components["schemas"]["FlashcardRequest"];
            };
        };
        responses: {
            /** @description Flashcards generated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlashcardResponse"];
                };
            };
            /** @description Internal Server Error - Failed to generate flashcards. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
}
