name: Deploy Docker Images to AWS EC2 & Kubernetes deployment (helm) to AET Cluster

on: [workflow_dispatch]

jobs:
  
  docker-to-aws:
    runs-on: ubuntu-latest
    environment:
      name: AWS
      url: "https://client.${{ vars.EC2_PUBLIC_IP }}.nip.io"
    steps:      
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Copy Docker Compose File From Repo to VM Host
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.EC2_PUBLIC_IP }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          source: "./compose.aws.yml"
          target: /home/${{ vars.AWS_EC2_USER }}

      - name: SSH to VM and Create .env.prod
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.EC2_PUBLIC_IP }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            rm .env.prod
            touch .env.prod
            echo "CLIENT_HOST=client.${{ vars.EC2_PUBLIC_IP }}.nip.io" >> .env.prod
            echo "SERVER_HOST=api.${{ vars.EC2_PUBLIC_IP }}.nip.io" >> .env.prod
            echo "PUBLIC_API_URL=https://api.${{ vars.EC2_PUBLIC_IP }}.nip.io/api" >> .env.prod

      - name: SSH to VM and Execute Docker-Compose Up
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.EC2_PUBLIC_IP }}
          username: ${{ vars.AWS_EC2_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            echo "Logging into Docker registry..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            echo "Starting Docker Compose..."
            docker compose -f compose.aws.yml --env-file=.env.prod up --pull=always -d
  helm-to-aet:
      runs-on: ubuntu-latest
      environment:
        name: AET
      needs: docker-to-aws
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4

        - name: Set up kubeconfig
          run: |
            mkdir -p ~/.kube
            echo "${{ secrets.AET_KUBECONFIG }}" > ~/.kube/config
        
        - name: Install Helm
          uses: azure/setup-helm@v3
          with:
            version: v3.12.3

        - name: Deploy to AET Cluster
          run: |
            helm upgrade --install ${{ vars.APP_NAME }} ./helm/lecture-bot-app \
              --namespace ${{ vars.NAMESPACE }}  \
              --create-namespace \
              --values ./helm/lecture-bot-app/values.aet.yaml 
        



